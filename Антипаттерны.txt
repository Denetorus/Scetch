Дополнен код фреймворка SKETCH, выложено
https://github.com/Denetorus/Sketch
Добавлен механизм миграции и поддержка СУБД постгрисс.

=====================
АНТИПАТТЕРНЫ В КОДЕ
======================

1) СПАГЕТТИ
На данном этапе разработки антипаттен незначительно нарушен в файле init.php
В связи с отсутсвием соответствующих контроллеров, данный файл не только переводит пользователя в авторизацию, но и запускает механизи миграции.

$migrate = new \object\DBMain\migration\Migrate();
$migrate->run();

$router = new sign\SignMain();
$router->run();

2) ЛАЗАНЬЯ
На данном этапе фактически отсутвует. С натяжкой можно назвать лазаньей классы DBBase -> DBMain. Фактически DBDase сожержит лишь одну короткую функцию, обращенную к классу наследнику.

    public static function getInstance(){
        if (static::$DB === null) {
            static::$DB = new DBSQL();
            static::$DB->Connect(static::GetAttributes());
        };
        return static::$DB;
    }

 Если класс DBBase не будет расширен, то оптимально будет перенести его кода в DBMain, создать на основе DBBase интерфейс и отказ от лишнего слоя.

3) СЛЕПАЯ ВЕРА
В классе DBSQL функция "connect" ожидает на вход аттрибутов. Так как класс находится на глубоком уровне доступа, то по задумке к нему будет обращаться только код разработчика этого же класса. Разработчик поверил, что сюда никто не будет передавать параметры, а сам он не ошибётся в их передаче. При расширении кода, доступ к формированию аттрибутов передан в конфигурационный файл, который может быть изменён администратором системы. Ошибочное составление конфигурационного файла вызовет ошибку при вызове функции.

 public function connect($attr = null)
    {

        if ($attr !== null){
            $this->setAttributes($attr);
        }

	...
    }

4) КОДИРОВАНИЕ ПУТЁМ ИСКЛЮЧЕНИЯ
В данной версии фреймворка кодирование исключений отсутсвует вообще.

5) ШИФРОВАННЫЙ КОД
Антипаттерн отсутствует. Код является открытым, а классы и функции называются в соответствии с их сутью. Так базовые классы, которые используются только через наследников называются с добавлением ключевого слова "Base", например 
- "DBBase" - базовый класс для работы с базой данных;
- "SignBase" - базовый класс для работы с авторизацией
- "MigrateBase" - базовый класс для осуществления миграций

Названия файлов миграций включют в себя дату создания и содержание этих миграций
- "m130524_201442_create_user_table.php"

С некоторой натяжкой можно назвать использование абрревиатуры DB - как антипаттерн шифрованный код. При этом, стоит отметить, что это общепринятыя абревиатура базы данных.

6) МАГИЧЕСКИЕ ЧИСЛИ
Не используются

7) ЖЁСТКОЕ КОДИРОВАНИЕ
Антипаттерн присутсвует на данный момент в классе DBSQL функция tableIsExist поддерживается только при использовании БД постгрисс. При этом данная библиотека должна обслуживать и ряд других СУБД. С учётом того, что механизм миграции опирается на данную функцию, то при использовании других СУБД, данный антипаттерн сделает недоступной осуществление миграций.


=====================
АНТИПАТТЕРНЫ В ООП
======================

1) БОЖЕСТВЕННЫЙ ОБЪЕКТ
На данном этапе таких нет, каждый объект выполяет узкую задачу.

2) ПОЛТЕРГЕЙСТ
На данный момент функций или классов, являющихся полтергейстом не наблюдается

3) СПЛОШНОЕ ОДИНОЧЕСТВО
Singlton используется в классе DBBase, при этом, он обращён к классу наследнику. Следовательно каждый наследник данного класса будет отдельным синглтоном и будет поддерживать работу с отдельной базой данных. В этом смысле в системе может существовать несколько синглтонов, что в каком-то смысле можно считать антепаттерном. Однако тот факт, что каждый синглтон будет работать с отдельной БД и позволит избежать многократного переподключения к этим БД, считаю применение такого подхода уместным.

4) ПРИВАТИЗАЦИЯ
На данный момент все приватные функции были изменены на публичные или защищённые. Возможно при увеличении кода часть функций и свойств будут всё же сделаны приватными.

5,6) ИНТЕРФЕЙСНАЯ СОЛЯНКА и ЗАГЛУШКА
Сейчас используется только один интерфейс SinglModelInterface. Из одного солянку не сделаешь :)

=====================
АНТИПАТТЕРНЫ МЕТОДОЛОГИИ
======================

1) КОПИРОВАНИЕ-ВСТАВКА
Класс DBSQL вначале был взят из других проектов, в результате пришлось практически полностью перерабатывать класс под нужды более расширяемого приложения, такого как фреймворк. В результате было потрачено больше времени, чем написание аналогичного класса с нуля.

2) ЗОЛОТОЙ МОЛОТОК
В данной разработке не использовался. Но в следующих, возможно буду его снова применять на основе опыта обретённого на этом проекте :)

3) ФАКТОР НЕВЕРОЯТНОСТИ
Использование антипаттерна описано в антипаттерне СЛЕПАЯ ВЕРА

4) ПРЕЖДЕВРЕМЕННАЯ ОПТИМИЗАЦИЯ
Антипаттерн используется регулярно, в результате этого фреймвор до сих пор не содержит базовых механизмов - контроллеров, вьюшек и другого. Это создаёт вероятность того, что до окончания курса основные механизмы могут так и не быть разработаны ичерезмерная оптимизация кода в существующих классах станут бессмысленными.

5) ИЗОБРЕТЕНИЕ ВЕЛОСИПЕДА 
Можно было взять стандартные классы YII2 для работы с БД и не запорачиваться. Правда это, в какой-то мере можно назвать воровством. :) 

6) ИЗОБРЕТЕНИЕ КВАДРАТНОГО КОЛЕСА
Способ подключения классов к данному фреймворку схож с аналогичным в YII2, при этом, он функционально обрезан.


=====================
АРХИТЕКТУРНЫЕ АНТИПАТТЕРНЫ
======================

На данном уроке не будем их рассматривать, вернёмся к этому вопросу после реализации всех основных блоков архитектуры фреймворка. Схема архитектуры кажется хорошей, а как это будет реально функционировать и какие подводные камни этой архитектуры - посмотрим.